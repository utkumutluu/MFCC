import pyaudio
import wave
from python_speech_features import mfcc
import sys
import numpy as np

np.set_printoptions(threshold=sys.maxsize)
import scipy.io.wavfile as wav
import math

def dtw(mfcc1, mfcc2):
    live_sound = np.array(mfcc1)
    recorded_sound = np.array(mfcc2)
    table = np.array(np.zeros((len(live_sound), len(recorded_sound))))

    table_distance = 0;
    sum = 0;
    x = 1

    for i in range(len(recorded_sound)):
        table_distance = 0;
        for j in range(len(recorded_sound[0])):
            table_distance = (live_sound[0][j] - recorded_sound[i][j]) * (live_sound[0][j] - recorded_sound[i][j])
            table[0][i] = table[0][i] + table_distance
    table_distance = 0

    for i in range(1, len(live_sound)):
        table_distance = 0;
        for j in range(len(recorded_sound[0])):
            table_distance = (live_sound[i][j] - recorded_sound[0][j]) * (live_sound[i][j] - recorded_sound[0][j])
            table[i][0] = table[i][0] + table_distance

    for i in range(1, len(recorded_sound)):
        table[0][i] = table[0][i] + table[0][i - 1]
    for i in range(1, len(live_sound)):
        table[i][0] = table[i][0] + table[i - 1][0]

    while (x <= len(table) - 1):
        for i in range(x, len(recorded_sound)):
            table_distance = 0;
            for j in range(0, len(recorded_sound[0])):
                table_distance = (live_sound[x][j] - recorded_sound[i][j]) * (live_sound[x][j] - recorded_sound[i][j])
                table[x][i] = table[x][i] + table_distance

        table_distance = 0
        for i in range(x + 1, len(live_sound)):
            table_distance = 0;
            for j in range(0, len(recorded_sound[0])):
                table_distance = (live_sound[i][j] - recorded_sound[x][j]) * (live_sound[i][j] - recorded_sound[x][j])
                table[i][x] = table[i][x] + table_distance

        for i in range(x, len(recorded_sound)):
            if table[x][i - 1] <= table[x - 1][i] and table[x][i - 1] <= table[x - 1][i - 1]:
                table[x][i] = table[x][i] + table[x][i - 1]
            elif table[x - 1][i - 1] <= table[x - 1][i] and table[x - 1][i - 1] <= table[x][i - 1]:
                table[x][i] = table[x][i] + table[x - 1][i - 1]
            elif table[x - 1][i] <= table[x - 1][i - 1] and table[x - 1][i] <= table[x][i - 1]:
                table[x][i] = table[x][i] + table[x - 1][i]
        for i in range(x + 1, len(live_sound)):
            if table[i - 1][x] <= table[i][x - 1] and table[i - 1][x] <= table[i - 1][x - 1]:
                table[i][x] = table[i][x] + table[i - 1][x]
            elif table[i - 1][x - 1] <= table[i][x - 1] and table[i - 1][x - 1] <= table[i - 1][x]:
                table[i][x] = table[i][x] + table[i - 1][x - 1]
            elif table[i][x - 1] <= table[i - 1][x - 1] and table[i][x - 1] <= table[i - 1][x]:
                table[i][x] = table[i][x] + table[i][x - 1]

        x = x + 1;

    print table

    for i in range(0, len(table)):
        for j in range(0, len(table[0])):
            table[i][j] = math.sqrt(table[i][j])

    print
    print table
    print
    print len(table)
    print len(table[0])

(RATE, sig) = wav.read("C:/Users/utkum/Desktop/sesler/tofftl_2.wav")
mfcc_feat = mfcc(sig, RATE)

(RATE, sig) = wav.read("C:/Users/utkum/Desktop/sesler/tofftl_template.wav")
mfcc1_feat = mfcc(sig, RATE)

if(len(mfcc_feat) <= len(mfcc1_feat)):
    dtw(mfcc_feat, mfcc1_feat)
elif (len(mfcc_feat) > len(mfcc1_feat)):
    dtw(mfcc1_feat, mfcc_feat)
